"""

–í –º–æ–¥—É–ª–µ —Å–æ–±—Ä–∞–Ω—ã —Ñ—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä—É—é—â–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.

–¢–∞–∫–∂–µ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—á—Ç—ã.

"""

import os
import smtplib
from datetime import datetime
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

from aiogram import Bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, \
    ReplyKeyboardMarkup, KeyboardButton

from dotenv import load_dotenv

from app_functions.api_functions import upload_and_get_link, \
    upload_information_to_gsheets
from app_functions.database_functions import get_user_by_id
from app_functions.gps_functions import get_address_from_coordinates, \
    parse_data_from_gps_dict
from models import UserData
from settings import DEV_TG_ID, YANDEX_CLIENT, YA_DISK_FOLDER, GPS_API_KEY, \
    GOOGLE_CLIENT, GOOGLE_SHEET_NAME, database_path

load_dotenv()


async def download_photo(file_id: str, bot) -> bytes:
    """–ü–æ–ª—É—á–∞–µ—Ç file_id –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞ —Ñ–∞–π–ª –≤ bytes."""
    file = await bot.get_file(file_id)
    file_path = file.file_path
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ bytes
    photo_bytes = await bot.download_file(file_path)
    return photo_bytes


def get_cancel() -> InlineKeyboardMarkup:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π –û—Ç–º–µ–Ω–∞."""
    keyboard = InlineKeyboardMarkup()
    button = InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel')
    keyboard.add(button)
    return keyboard


def get_main_menu() -> InlineKeyboardMarkup:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.

    –ù–∞–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ
    """
    keyboard = InlineKeyboardMarkup()
    button = InlineKeyboardButton(text='–ù–∞–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–≤—ã–≤–æ–∑–µ',
                                  callback_data='driver_report')
    keyboard.add(button)
    return keyboard


def get_zone_keyboard(zones: list[str]):
    keyboard = InlineKeyboardMarkup()
    for zone in zones:
        keyboard.add(
            InlineKeyboardButton(text=zone, callback_data=f"zone:{zone}"))
    return keyboard


def get_location_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True,
                                   one_time_keyboard=True)
    location_button = KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é",
                                     request_location=True)
    keyboard.add(location_button)
    return keyboard


def get_reason_keyboard(reasons: list[str], page=0):
    reasons_per_page = 7
    start = page * reasons_per_page
    end = start + reasons_per_page
    reasons_page = reasons[start:end]

    keyboard = InlineKeyboardMarkup(row_width=1)
    for reason in reasons_page:
        reason.find('.')
        keyboard.add(
            InlineKeyboardButton(reason,
                                 callback_data=f"reason:{reason[:reason.find('.') + 1]}"))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "‚¨Ö –ù–∞–∑–∞–¥" –∏ "‚û° –î–∞–ª–µ–µ"
    navigation_buttons = []
    if start > 0:
        navigation_buttons.append(
            InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"page:{page - 1}"))
    if end < len(reasons):
        navigation_buttons.append(
            InlineKeyboardButton("‚û° –î–∞–ª–µ–µ", callback_data=f"page:{page + 1}"))

    if navigation_buttons:
        keyboard.row(*navigation_buttons)

    return keyboard


def get_reason_full_text(reasons: list, part: str) -> str | None:
    for reason in reasons:
        if reason.startswith(part):
            return reason
    return None


def get_confirmation_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm"),
        InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")
    )
    return keyboard


async def send_email(message_text, target_email):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∏—Å—å–º–æ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é –ø–æ—á—Ç—É."""
    email = os.getenv("EMAIL")
    password = os.getenv("PASSWORD_EMAIL")
    time = datetime.now()

    msg = MIMEMultipart()
    msg['From'] = email
    msg['To'] = target_email
    msg[
        'Subject'] = (f"–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –±–æ—Ç–æ–º "
                      f"{time.strftime('%Y-%m-%d %H:%M')}")
    msg.attach(MIMEText(message_text))
    try:
        mailserver = smtplib.SMTP('smtp.yandex.ru', 587)

        mailserver.ehlo()
        # –ó–∞—â–∏—â–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è tls
        mailserver.starttls()
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å–µ–±—è –∫–∞–∫ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        # –ø–µ—Ä–µ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π.
        mailserver.ehlo()
        mailserver.login(email, password)

        mailserver.sendmail(email, target_email, msg.as_string())

        mailserver.quit()
    except smtplib.SMTPException:
        print("–û—à–∏–±–∫–∞: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")


async def save_user_data(data: dict, tg_bot: Bot):
    gs_data = []
    address_dict = []
    try:
        gs_data = list(
            get_user_by_id(data.get('user_id'), database_path).values())
    except Exception as e:
        await tg_bot.send_message(DEV_TG_ID,
                                  f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e} –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    print(data)
    try:
        downloaded_file = await download_photo(data.get('photo'), tg_bot)
        ya_disk_file_name = upload_and_get_link(YANDEX_CLIENT, downloaded_file,
                                                YA_DISK_FOLDER)
        data.update({'ya_disk_file_name': ya_disk_file_name})
    except Exception as e:
        await tg_bot.send_message(DEV_TG_ID,
                                  f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e} –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ.")
        return
    try:
        address = get_address_from_coordinates(data.get('latitude'),
                                               data.get('longitude'),
                                               GPS_API_KEY)
        address_dict = parse_data_from_gps_dict(address)
    except Exception as e:
        await tg_bot.send_message(DEV_TG_ID,
                                  f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e} –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞.")
        return
    try:
        del data['photo']
        gs_data.extend(list(data.values()))
        if address_dict:
            gs_data.extend(list(address_dict.values()))
        print(gs_data)
        upload_information_to_gsheets(GOOGLE_CLIENT, GOOGLE_SHEET_NAME,
                                      gs_data)
    except Exception as e:
        await tg_bot.send_message(DEV_TG_ID,
                                  f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e} –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Ñ–Ω–æ—Ä–º–∞—Ü–∏–∏.")
        return
